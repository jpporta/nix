#!/usr/bin/env node

/**
 * @typedef CacheData
 * @type {object}
 * @property {Date} expireAt
 * @property {Date} createdAt
 * @property {string} total
 * @property {boolean} isWorking
 */

/**
 * @typedef ReturnType
 * @type {object}
 * @property {string} TotalTime
 * @property {boolean} IsWorking
 */
const fs = require("fs");
const path = require("path");
const homedir = require("os").homedir();
const filePath = path.join(homedir, ".local", "share", "worktimercache.json");
try {
  const cache = fs.readFileSync(filePath, "utf8");

  if (cache) {
    /** @type {CacheData} */
    const data = JSON.parse(cache);
    if (data.expireAt > new Date()) {
      // Total time + amount passed since createdAt
      const diff = new Date() - data.createdAt;
      let [hours, minutes, seconds] = data.total.split(":").map(Number);
      hours += Math.floor(diff / 3600000);
      minutes += Math.floor((diff % 3600000) / 60000);
      seconds += Math.floor((diff % 60000) / 1000);
      /** @type {ReturnType} */
      console.log(
        `${data.isWorking ? "%{F#a6e3a1}" : "%{F#f38ba8}"} ${[hours, minutes, seconds].join(":")}${"%{F-}"}`,
      );
    } else {
				getNewCache();
		}
  }
		else {

				getNewCache();
		}
} catch (e) {
				getNewCache();
  //do nothing
}

// If cache is expired or doesn't exist
async function getNewCache(url) {
  const res = await fetch("http://dev.joaoporta.tech:8080/timetracker");
  /* @type {ReturnType} */
  const data = await res.json();
  /*@type {CacheData} */
  const newCache = {
    expireAt: new Date(Date.now() + 60000 * 10), // 1 minute
    createdAt: new Date(),
    total: data.TotalToday,
    isWorking: data.IsWorking,
  };

  fs.writeFileSync(filePath, JSON.stringify(newCache), "utf8");
  console.log(
    `${data.IsWorking ? "%{F#a6e3a1}" : "%{F#f38ba8}"} ${data.TotalToday}${"%{F-}"}`,
  );
}

